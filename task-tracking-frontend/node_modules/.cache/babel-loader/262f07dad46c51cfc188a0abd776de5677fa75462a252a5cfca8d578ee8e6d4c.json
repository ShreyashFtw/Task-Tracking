{"ast":null,"code":"var _jsxFileName = \"/Users/shreyashthaware/Desktop/TaskManagement/task-management-frontend/src/Components/Login.js\";\nimport React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\"; // Import withRouter to access the history object\nimport './Login.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Login extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      username: \"\",\n      password: \"\"\n    };\n    this.handleInputChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n    this.handleLogin = () => {\n      console.log(\"Login button clicked\");\n      const {\n        username,\n        password\n      } = this.state;\n\n      // Implement a simple login logic (e.g., check if username and password are not empty)\n      if (username.trim() !== \"\" && password.trim() !== \"\") {\n        // Simulate a successful login by setting a flag or storing a token (you would typically make an API request here)\n        // For simplicity, we'll use a local storage flag.\n        localStorage.setItem(\"isLoggedIn\", \"true\");\n        console.log(\"Redirecting to /tasks/new\"); // Add this line\n\n        // Use the history object to navigate to the TaskForm component\n        this.props.history.push(\"/tasks/new\");\n      } else {\n        // Handle login failure or show an error message\n        alert(\"Login failed. Please provide valid credentials.\");\n      }\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"user\",\n        type: \"text\",\n        name: \"username\",\n        placeholder: \"Username\",\n        value: this.state.username,\n        onChange: this.handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"\",\n        type: \"password\",\n        name: \"password\",\n        placeholder: \"Password\",\n        value: this.state.password,\n        onChange: this.handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleLogin,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default _c = withRouter(Login);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["React","Component","withRouter","jsxDEV","_jsxDEV","Login","constructor","args","state","username","password","handleInputChange","e","setState","target","name","value","handleLogin","console","log","trim","localStorage","setItem","props","history","push","alert","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/shreyashthaware/Desktop/TaskManagement/task-management-frontend/src/Components/Login.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\"; // Import withRouter to access the history object\nimport './Login.css';\n\nclass Login extends Component {\n  state = {\n    username: \"\",\n    password: \"\",\n  };\n\n  handleInputChange = (e) => {\n    this.setState({ [e.target.name]: e.target.value });\n  };\n\n  handleLogin = () => {\n    console.log(\"Login button clicked\");\n    const { username, password } = this.state;\n\n    // Implement a simple login logic (e.g., check if username and password are not empty)\n    if (username.trim() !== \"\" && password.trim() !== \"\") {\n      // Simulate a successful login by setting a flag or storing a token (you would typically make an API request here)\n      // For simplicity, we'll use a local storage flag.\n      localStorage.setItem(\"isLoggedIn\", \"true\");\n      console.log(\"Redirecting to /tasks/new\"); // Add this line\n\n\n      // Use the history object to navigate to the TaskForm component\n      this.props.history.push(\"/tasks/new\");\n    } else {\n      // Handle login failure or show an error message\n      alert(\"Login failed. Please provide valid credentials.\");\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"login\">\n        <h1>Login</h1>\n        <input\n        className=\"user\"\n          type=\"text\"\n          name=\"username\"\n          placeholder=\"Username\"\n          value={this.state.username}\n          onChange={this.handleInputChange}\n        />\n        <input\n        className=\"\"\n          type=\"password\"\n          name=\"password\"\n          placeholder=\"Password\"\n          value={this.state.password}\n          onChange={this.handleInputChange}\n        />\n        <button onClick={this.handleLogin}>Login</button>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Login);\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,UAAU,QAAQ,kBAAkB,CAAC,CAAC;AAC/C,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,MAAMC,KAAK,SAASJ,SAAS,CAAC;EAAAK,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KAC5BC,KAAK,GAAG;MACNC,QAAQ,EAAE,EAAE;MACZC,QAAQ,EAAE;IACZ,CAAC;IAAA,KAEDC,iBAAiB,GAAIC,CAAC,IAAK;MACzB,IAAI,CAACC,QAAQ,CAAC;QAAE,CAACD,CAAC,CAACE,MAAM,CAACC,IAAI,GAAGH,CAAC,CAACE,MAAM,CAACE;MAAM,CAAC,CAAC;IACpD,CAAC;IAAA,KAEDC,WAAW,GAAG,MAAM;MAClBC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;MACnC,MAAM;QAAEV,QAAQ;QAAEC;MAAS,CAAC,GAAG,IAAI,CAACF,KAAK;;MAEzC;MACA,IAAIC,QAAQ,CAACW,IAAI,CAAC,CAAC,KAAK,EAAE,IAAIV,QAAQ,CAACU,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QACpD;QACA;QACAC,YAAY,CAACC,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC;QAC1CJ,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC,CAAC,CAAC;;QAG1C;QACA,IAAI,CAACI,KAAK,CAACC,OAAO,CAACC,IAAI,CAAC,YAAY,CAAC;MACvC,CAAC,MAAM;QACL;QACAC,KAAK,CAAC,iDAAiD,CAAC;MAC1D;IACF,CAAC;EAAA;EAEDC,MAAMA,CAAA,EAAG;IACP,oBACEvB,OAAA;MAAKwB,SAAS,EAAC,OAAO;MAAAC,QAAA,gBACpBzB,OAAA;QAAAyB,QAAA,EAAI;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACd7B,OAAA;QACAwB,SAAS,EAAC,MAAM;QACdM,IAAI,EAAC,MAAM;QACXnB,IAAI,EAAC,UAAU;QACfoB,WAAW,EAAC,UAAU;QACtBnB,KAAK,EAAE,IAAI,CAACR,KAAK,CAACC,QAAS;QAC3B2B,QAAQ,EAAE,IAAI,CAACzB;MAAkB;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClC,CAAC,eACF7B,OAAA;QACAwB,SAAS,EAAC,EAAE;QACVM,IAAI,EAAC,UAAU;QACfnB,IAAI,EAAC,UAAU;QACfoB,WAAW,EAAC,UAAU;QACtBnB,KAAK,EAAE,IAAI,CAACR,KAAK,CAACE,QAAS;QAC3B0B,QAAQ,EAAE,IAAI,CAACzB;MAAkB;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClC,CAAC,eACF7B,OAAA;QAAQiC,OAAO,EAAE,IAAI,CAACpB,WAAY;QAAAY,QAAA,EAAC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC;EAEV;AACF;AAEA,eAAAK,EAAA,GAAepC,UAAU,CAACG,KAAK,CAAC;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}